# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import benchmark_pb2 as benchmark__pb2


class GrpcBenchmarkApiServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BenchmarkBasicRequest = channel.unary_unary(
            "/ai.statsbomb.com.GrpcBenchmarkApiService/BenchmarkBasicRequest",
            request_serializer=benchmark__pb2.BasicRequest.SerializeToString,
            response_deserializer=benchmark__pb2.BasicResponse.FromString,
        )
        self.BenchmarkB64Image = channel.unary_unary(
            "/ai.statsbomb.com.GrpcBenchmarkApiService/BenchmarkB64Image",
            request_serializer=benchmark__pb2.ImageBase64Request.SerializeToString,
            response_deserializer=benchmark__pb2.BasicResponse.FromString,
        )
        self.BenchmarkBinaryImage = channel.unary_unary(
            "/ai.statsbomb.com.GrpcBenchmarkApiService/BenchmarkBinaryImage",
            request_serializer=benchmark__pb2.ImageBinaryRequest.SerializeToString,
            response_deserializer=benchmark__pb2.BasicResponse.FromString,
        )


class GrpcBenchmarkApiServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BenchmarkBasicRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BenchmarkB64Image(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def BenchmarkBinaryImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_GrpcBenchmarkApiServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "BenchmarkBasicRequest": grpc.unary_unary_rpc_method_handler(
            servicer.BenchmarkBasicRequest,
            request_deserializer=benchmark__pb2.BasicRequest.FromString,
            response_serializer=benchmark__pb2.BasicResponse.SerializeToString,
        ),
        "BenchmarkB64Image": grpc.unary_unary_rpc_method_handler(
            servicer.BenchmarkB64Image,
            request_deserializer=benchmark__pb2.ImageBase64Request.FromString,
            response_serializer=benchmark__pb2.BasicResponse.SerializeToString,
        ),
        "BenchmarkBinaryImage": grpc.unary_unary_rpc_method_handler(
            servicer.BenchmarkBinaryImage,
            request_deserializer=benchmark__pb2.ImageBinaryRequest.FromString,
            response_serializer=benchmark__pb2.BasicResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("ai.statsbomb.com.GrpcBenchmarkApiService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class GrpcBenchmarkApiService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BenchmarkBasicRequest(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ai.statsbomb.com.GrpcBenchmarkApiService/BenchmarkBasicRequest",
            benchmark__pb2.BasicRequest.SerializeToString,
            benchmark__pb2.BasicResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def BenchmarkB64Image(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ai.statsbomb.com.GrpcBenchmarkApiService/BenchmarkB64Image",
            benchmark__pb2.ImageBase64Request.SerializeToString,
            benchmark__pb2.BasicResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def BenchmarkBinaryImage(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ai.statsbomb.com.GrpcBenchmarkApiService/BenchmarkBinaryImage",
            benchmark__pb2.ImageBinaryRequest.SerializeToString,
            benchmark__pb2.BasicResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
